const ethers = require("ethers");
const {DefenderRelayProvider, DefenderRelaySigner} = require("defender-relay-client/lib/ethers");

const clearingHouseABI = { "_format": "hh-sol-artifact-1", "contractName": "ClearingHouse", "sourceName": "src/ClearingHouse.sol", "abi": [ { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "isProvider", "type": "bool" } ], "name": "BackstopLiquidityProviderChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "uint256", "name": "liquidationFeeRatio", "type": "uint256" } ], "name": "LiquidationFeeRatioChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": true, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": false, "internalType": "int256", "name": "amount", "type": "int256" }, { "indexed": false, "internalType": "int256", "name": "fundingPayment", "type": "int256" } ], "name": "MarginChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "uint256", "name": "marginRatio", "type": "uint256" } ], "name": "MarginRatioChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" } ], "name": "OwnershipTransferred", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "address", "name": "account", "type": "address" } ], "name": "Paused", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "int256", "name": "newPositionSize", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "oldLiquidityIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newLiquidityIndex", "type": "uint256" } ], "name": "PositionAdjusted", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": true, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "margin", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "positionNotional", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "exchangedPositionSize", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "fee", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "positionSizeAfter", "type": "int256" }, { "indexed": false, "internalType": "int256", "name": "realizedPnl", "type": "int256" }, { "indexed": false, "internalType": "int256", "name": "unrealizedPnlAfter", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "badDebt", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "liquidationPenalty", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "spotPrice", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "fundingPayment", "type": "int256" } ], "name": "PositionChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": true, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "positionNotional", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "positionSize", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "liquidationFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "liquidator", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "badDebt", "type": "uint256" } ], "name": "PositionLiquidated", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": true, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "valueTransferred", "type": "uint256" } ], "name": "PositionSettled", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "address", "name": "amm", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "blockNumber", "type": "uint256" } ], "name": "RestrictionModeEntered", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "internalType": "address", "name": "account", "type": "address" } ], "name": "Unpaused", "type": "event" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "address", "name": "_trader", "type": "address" }, { "internalType": "enum ClearingHouse.PnlCalcOption", "name": "_pnlCalcOption", "type": "uint8" } ], "name": "_getMarginRatioByCalcOption", "outputs": [ { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "", "type": "tuple" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_addedMargin", "type": "tuple" } ], "name": "addMargin", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" } ], "name": "backstopLiquidityProviderMap", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "candidate", "outputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_quoteAssetAmountLimit", "type": "tuple" } ], "name": "closePosition", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "collateralMonitor", "outputs": [ { "internalType": "contract ICollateralMonitor", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" } ], "name": "getLatestCumulativePremiumFraction", "outputs": [ { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "", "type": "tuple" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "address", "name": "_trader", "type": "address" } ], "name": "getMarginRatio", "outputs": [ { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "", "type": "tuple" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "address", "name": "_trader", "type": "address" } ], "name": "getPosition", "outputs": [ { "components": [ { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "size", "type": "tuple" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "margin", "type": "tuple" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "openNotional", "type": "tuple" }, { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "lastUpdatedCumulativePremiumFraction", "type": "tuple" }, { "internalType": "uint256", "name": "liquidityHistoryIndex", "type": "uint256" }, { "internalType": "uint256", "name": "blockNumber", "type": "uint256" } ], "internalType": "struct ClearingHouse.Position", "name": "", "type": "tuple" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "address", "name": "_trader", "type": "address" }, { "internalType": "enum ClearingHouse.PnlCalcOption", "name": "_pnlCalcOption", "type": "uint8" } ], "name": "getPositionNotionalAndUnrealizedPnl", "outputs": [ { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "positionNotional", "type": "tuple" }, { "components": [ { "internalType": "int256", "name": "d", "type": "int256" } ], "internalType": "struct SignedDecimal.signedDecimal", "name": "unrealizedPnl", "type": "tuple" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" } ], "name": "getSpotPrice", "outputs": [ { "internalType": "uint256", "name": "spotPrice", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "initMarginRatio", "outputs": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "uint256", "name": "_initMarginRatio", "type": "uint256" }, { "internalType": "uint256", "name": "_maintenanceMarginRatio", "type": "uint256" }, { "internalType": "uint256", "name": "_liquidationFeeRatio", "type": "uint256" }, { "internalType": "contract IInsuranceFund", "name": "_insuranceFund", "type": "address" }, { "internalType": "contract IMultiTokenRewardRecipient", "name": "_tollPool", "type": "address" } ], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "insuranceFund", "outputs": [ { "internalType": "contract IInsuranceFund", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "address", "name": "_trader", "type": "address" } ], "name": "liquidate", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "liquidationFeeRatio", "outputs": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "maintenanceMarginRatio", "outputs": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "", "type": "address" } ], "name": "openInterestNotionalMap", "outputs": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "internalType": "enum ClearingHouse.Side", "name": "_side", "type": "uint8" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_quoteAssetAmount", "type": "tuple" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_leverage", "type": "tuple" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_baseAssetAmountLimit", "type": "tuple" } ], "name": "openPosition", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "owner", "outputs": [ { "internalType": "address", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "partialLiquidationRatio", "outputs": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "paused", "outputs": [ { "internalType": "bool", "name": "", "type": "bool" } ], "stateMutability": "view", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" } ], "name": "payFunding", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "contract IAmm", "name": "_amm", "type": "address" }, { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_removedMargin", "type": "tuple" } ], "name": "removeMargin", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "account", "type": "address" }, { "internalType": "bool", "name": "isProvider", "type": "bool" } ], "name": "setBackstopLiquidityProvider", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "_collateralMonitor", "type": "address" } ], "name": "setCollateralMonitor", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_liquidationFeeRatio", "type": "tuple" } ], "name": "setLiquidationFeeRatio", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_maintenanceMarginRatio", "type": "tuple" } ], "name": "setMaintenanceMarginRatio", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "newOwner", "type": "address" } ], "name": "setOwner", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "components": [ { "internalType": "uint256", "name": "d", "type": "uint256" } ], "internalType": "struct Decimal.decimal", "name": "_ratio", "type": "tuple" } ], "name": "setPartialLiquidationRatio", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "_tollPool", "type": "address" } ], "name": "setTollPool", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [ { "internalType": "address", "name": "_whitelist", "type": "address" } ], "name": "setWhitelist", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "tollPool", "outputs": [ { "internalType": "contract IMultiTokenRewardRecipient", "name": "", "type": "address" } ], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "updateOwner", "outputs": [], "stateMutability": "nonpayable", "type": "function" } ] };


exports.main = async function(signer) {
    // TO DO: add clearing house and amm addresses
    const clearingHouseAddress = "0x602969FFAddA7d74f5da69B817688E984Ba4EBbD";
    const ammAddress = "0x474f8506122F55C626AE88b5eA0175b73C8901bb"; //BTC_AMM
    const clearingHouse = new ethers.Contract(clearingHouseAddress, clearingHouseABI.abi, signer);

    clearingHouse.payFunding(ammAddress);
}

// entry point for Autotask
exports.handler = async function(credentials) {
    const provider = new DefenderRelayProvider(credentials);
    const signer = new DefenderRelaySigner(credentials, provider, {speed: 'fast' });
    return exports.main(signer);
}

// To run locally
if (require.main === module) {
    require('dotenv').config();
    const {API_KEY :apiKey, API_SECRET: apiSecret} = process.env;
    exports.handler({apiKey, apiSecret})
    .then(() => process.exit(0))
    .catch(error => {console.error(); process.exit(1);});
}
